{
	"terminal pos-cli install/update": {
		"prefix": "?:pos-cli:1:install/update",
		"body": "npm i -g @platform-os/pos-cli",
		"description": "prefix 'sudo' If your node is installed globally"
	},
	"terminal pos-cli test": {
		"prefix": "?:pos-cli:2:test",
		"body": "pos-cli -V",
		"description": "If the pos-cli has been installed correctly, running this command displays the version of your instance. If the pos-cli hasn't been installed, running this command gives a command not found error."
	},
	"terminal pos-cli initialize": {
		"prefix": "?:pos-cli:3:initialize",
		"body": "pos-cli init",
		"description": "Create the required directory structure using the pos-cli."
	},
	"terminal pos-cli add environment": {
		"prefix": "?:pos-cli:4:Enviroment",
		"body": "pos-cli env add ${1:[environment] eg Staging,Production} --email ${2:[your email]} --url ${3:[https://yourURL.com]}",
		"description": "To add your environment to a config file, run the env add command, and authenticate with your Partner Portal credentials"
	},
	"terminal pos-cli env list": {
		"prefix": "?:pos-cli:5:EnvironmentsList",
		"body": "pos-cli env list",
		"description": "Lists all added environments."
	},
	"terminal pos-cli deploy": {
		"prefix": "?:pos-cli:6:deploy",
		"body": "pos-cli deploy ${0:[environment] eg Staging,Production}",
		"description": "To deploy all changes, run the deploy command"
	},
	"terminal pos-cli deploy with force": {
		"prefix": "?:pos-cli:deploy:7:force",
		"body": "pos-cli deploy ${0:[environment] eg Staging,Production} -f",
		"description": "To deploy and override everything, run the deploy -f command"
	},
	"terminal pos-cli sync": {
		"prefix": "?:pos-cli:8:sync",
		"body": "pos-cli sync ${0:[environment] eg Staging,Production}",
		"description": "To immediately push changes in your codebase to the environment, run the sync command"
	},
	"terminal pos-cli gui": {
		"prefix": "?:pos-cli:9:gui",
		"body": "pos-cli gui serve ${0:[environment] eg Staging,Production}",
		"description": "To explore your instance database using graphql open http://localhost:3333/gui/graphql,\nTo list, edit and create resources open http://localhost:3333/gui/editor"
	},



	"Yaml Pages Preferences": {
		"prefix": "---:views:pages",
		"body": [
			"---",
			"slug: ${1:/path}",
			"layout_name: ${2:layout}",
			"authorization_policies: $3",
			"converter: ${4:markdown}",
			"format: ${5|html,xml,csv,json,rss,css,js,pdf,txt|}",
			"handler:",
			"max_deep_level:",
			"metadata:",
			"method: ${9|get,post,put,delete|}",
			"redirect_code: ${10|301,302|}",
			"redirect_to: ${11:PageURL}",
			"response_headers: ${12:JSON-Overide most http headers}",
			"searchable: ${13:Searchable by gQL default false}",
			"---"
		],
		"description": "Yaml Page settings"
	},
	"Yaml Page Metadata": {
		"prefix": "---:meta",
		"body": [
			"title: ${1:Title}",
			"description: ${2:Description}",
			"tags: [\"${3:tag1}\",]"
		],
		"description": "Yaml Page Metadata"
	},
	"Yaml Page Response Headers": {
		"prefix": "---:headers",
		"body": [
			"{",
			"    \"Content-Type\": \"${1:text/xml},\"",
			"    \"${2:Some-Header}\": \"${3:Value}\"",
			"}"
		],
		"description": "Yaml Page Response Header overide. Restricted headers: cache-control, etag, set-cookie, x-request-id, x-xss-protection"
	},
	"Yaml user_profile_types": {
		"prefix": "---:user_profile_types",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"custom_attributes:",
			"    - ${2:name}: ${3:value}",
			"    ${4:name}: ${5:value}",
			"---"
		],
		"description": "Yaml Page settings"
	},
	"Yaml custom_model_types": {
		"prefix": "---:custom_model_types:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"custom_attributes:",
			"    - name: ${2:value}",
			"    attribute_type: ${3|--user-defined attribute--,address,array,boolean,date,datetime,file,float,integer,photo,string,text|}",
			"    name: ${4:value}",
			"    attribute_type: ${5|--custom address--,address,latitude,longitude,formatted_address,apartment,street,suburb,city,state,country,iso_country_code,postcode|}",
			"    - name: ${6:value}",
			"    attribute_type: ${7|--custom image--,photo|}",
			"    versions_configuration:",
			"        versions_configuration: ${8|--versions_configuration--,mini,thumb,normal|}",
			"            width: ${9:px (integer)}",
			"            height: ${10:px (integer)}",
			"    - name: ${11:value}",
			"    attribute_type: ${12|--custom attachement--,file|}",
			"user_profile_types:",
			"    - ${13:name ie user_profile_types eg developer}",
			"relationship_types:",
			"    - ${14:name}",
			"transactable_types:",
			"    - ${15:name}",
			"---"
		],
		"description": "Full list of custon_model_types attributes"
	},
	"Yaml transactable_types": {
		"prefix": "---:transactable_types:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"custom_attributes:",
			"    - name: ${2:value}",
			"    attribute_type: ${3|--user-defined attribute--,address,array,boolean,date,datetime,file,float,integer,photo,string,text|}",
			"    - name: ${4:value}",
			"    attribute_type: ${5|--custom address--,address,latitude,longitude,formatted_address,apartment,street,suburb,city,state,country,iso_country_code,postcode|}",
			"    - name: ${6:value}",
			"    attribute_type: ${7|--custom image--,photo|}",
			"    versions_configuration:",
			"        versions_configuration: ${8|--versions_configuration--,mini,thumb,normal|}",
			"            width: ${9:px (integer)}",
			"            height: ${10:px (integer)}",
			"    - name: ${11:value}",
			"    attribute_type: ${12|--custom attachement--,file|}",
			"---"
		],
		"description": "Full list of transactable_types attributes"
	},
	"Yaml relationship_types": {
		"prefix": "---:relationship_types:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"custom_attributes:",
			"    - name: ${2:value}",
			"    attribute_type: ${3|--user-defined attribute--,address,array,boolean,date,datetime,file,float,integer,photo,string,text|}",
			"    - name: ${4:value}",
			"    attribute_type: ${5|--custom address--,address,latitude,longitude,formatted_address,apartment,street,suburb,city,state,country,iso_country_code,postcode|}",
			"    - name: ${6:value}",
			"    attribute_type: ${7|--custom image--,photo|}",
			"    versions_configuration:",
			"        versions_configuration: ${8|--versions_configuration--,mini,thumb,normal|}",
			"            width: ${9:px (integer)}",
			"            height: ${10:px (integer)}",
			"    - name: ${11:value}",
			"    attribute_type: ${12|--custom attachement--,file|}",
			"---"
		],
		"description": "Full list of relationship_types attributes"
	},
	"Yaml notifications email": {
		"prefix": "---:notifications:email:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"to: ${2:email, mobile, API endpoint}",
			"delay: ${3:Integer}",
			"enabled: ${4:alert (Boolean) default true}",
			"trigger_condition: ${5:Liquid condition default true}",
			"from: ${6:email}",
			"reply_to: ${7:email}",
			"cc: ${8:email}",
			"bcc: ${9:email}",
			"subject: $10",
			"layout_path: ${11:???}",
			"---"
		],
		"description": "Full list of email notifcation attributes"
	},
	"Yaml notifications sms": {
		"prefix": "---:notifications:SMS:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"to: ${2:email, mobile, API endpoint}",
			"delay: ${3:Integer}",
			"enabled: ${4:alert (Boolean) default true}",
			"trigger_condition: ${5:Liquid condition default true}",
			"---"
		],
		"description": "Full list of SMS notifcation attributes"
	},
	"Yaml notifications API": {
		"prefix": "---:notifications:API:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"to: ${2:email, mobile, API endpoint}",
			"delay: ${3:Integer}",
			"enabled: ${4:alert (Boolean) default true}",
			"trigger_condition: ${5:Liquid condition default true}",
			"request_type: ${6|get,post,put,delete|}",
			"headers: '{",
			"    \"Content-Type\": \"${8|application/json,text/html|}\"",
			"}'",
			"---"
		],
		"description": "Full list of API notifcation attributes"
	},
	"Yaml Authorization Policy": {
		"prefix": "---:authorization_policies:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"redirect_to: ${2: URL eg /unauthorized}",
			"flash_alert: ${3:text}",
			"---"
		],
		"description": "Full list of authorization_policies attributes"
	},
	"Yaml Form Configurations": {
		"prefix": "---:form_configurations:full",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"resource: ${2|BankAccount,CreditCard,CustomAttachment,CustomImage,CustomAddress,Customization,MerchantAccount,Payment,PaymentTransfer,Session,Transactable,User|}",
			"api_call_notifications: $3",
			"async_callback_actions: $4",
			"authorization_policies: $5",
			"callback_actions: $6",
			"configuration: $7",
			"default_payload: $8",
			"email_notifications: $9",
			"flash_alert: ${10:text/string}",
			"flash_notice: ${11:text/string}",
			"redirect_to: ${12:email}",
			"resource_owner: ${13|self,anyone|}",
			"sms_notifications: $14",
			"spam_protection: $15",
			"default_payload: |-",
			"  {",
			"    \"properties_attributes\": {",
			"      \"${16:property name}\": \"${17:Value}\"",
			"    }",
			"  }",
			"---"
		],
		"description": "Full list of form_configurations attributes"
	},
	"Yaml Form Configurations default payload": {
		"prefix": "---:form_configurations:default_payload",
		"body": [
			"default_payload: |-",
			"${1:liquid if any}",
			"    {",
			"        \"properties_attributes\": {",
			"            \"${2:some_custom_property}\": \"${3:Value}\"",
			"        }",
			"    }"
		],
		"description": "form_configurations default payload attribute"
	},
	"Yaml Form Configurations validation": {
		"prefix": "---:form_configurations:validation:full",
		"body": [
			"validation:",
			"${1:liquid if any}",
			"    presence: ${2|true|}",
			"        if: ${3:eg '{% if form.expires %}true{% endif %}'}",
			"        allow_nil: ${4|true,false|}",
			"        allow_blank: ${5|true,false|}",
			"    unique:",
			"        scope:",
			"            - other_property",
			"        message: ${6:eg Must be uniq}",
			"    confirmation: ${7|true|}",
			"    inclusion:",
			"        in: ${8|true,false|}",
			"        message: ${9:eg disclosure is required}",
			"    format:",
			"        with: ${10:eg !ruby/regexp /\\A[+]?[\\d \\-()]+\\z/}",
			"        allow_blank: ${11|true,false|}",
			"        message: ${12:eg This seems to be an invalid phone number.}",
			"    file_content_type:",
			"        allow:",
			"        ${13|- image/jpeg,- image/png,- application/pdf,- application/msword,- application/vnd.ms-excel|}",
			"    length:",
			"        ${14|is,within,maximum,minimum|}: ${15:integer/within=range}",
			"        message: ${16:eg You need to include Front side and Back side Photo ID}",
			"    numericality:",
			"        ${17|only_integer,greater_than,greater_than_or_equal_to,equal_to,less_than,less_than_or_equal_to,other_than,odd,even|}: ${15:integer}"
		],
		"description": "form_configurations validation attribute"
	},
	"Yaml Form translations": {
		"prefix": "---:translations",
		"body": [
			"${1:Country Code}:",
			"    ${1:(hash) eg greeting: hello world}:"
		],
		"description": "Translations"
	},
	"Yaml Form translations errors": {
		"prefix": "---:translations:errors",
		"body": [
			"errors:",
			"# The default format to use in full error messages.",
			"format: ${1:\"%{attribute} %{message}\"}",
			"# The values :model, :attribute and :value are always available for interpolation",
			"# The value :count is available when applicable. Can be used for pluralization.",
			"    messages:",
			"        model_invalid: ${2:\"Validation failed: %{errors}\"}",
			"        inclusion: ${3:\"is not included in the list\"}",
			"        exclusion: ${4:\"is reserved\"}",
			"        invalid: ${5:\"is invalid\"}",
			"        confirmation: ${6:\"doesn't match %{attribute}\"}",
			"        accepted: ${7:\"must be accepted\"}",
			"        empty: ${8:\"can't be empty\"}",
			"        blank: ${9:\"can't be blank\"}",
			"        present: ${10:\"must be blank\"}",
			"        too_long:",
			"            one: ${11:\"is too long (maximum is 1 character)\"}",
			"            other: ${12:\"is too long (maximum is %{count} characters)\"}",
			"        too_short:",
			"            one: ${13:\"is too short (minimum is 1 character)\"}",
			"            other: ${14:\"is too short (minimum is %{count} characters)\"}",
			"        wrong_length:",
			"            one: ${15:\"is the wrong length (should be 1 character)\"}",
			"            other: ${16:\"is the wrong length (should be %{count} characters)\"}",
			"        not_a_number: ${17:\"is not a number\"}",
			"        not_an_integer: ${18:\"must be an integer\"}",
			"        greater_than: ${19:\"must be greater than %{count}\"}",
			"        greater_than_or_equal_to: ${20:\"must be greater than or equal to %{count}\"}",
			"        equal_to: ${21:\"must be equal to %{count}\"}",
			"        less_than: ${22:\"must be less than %{count}\"}",
			"        less_than_or_equal_to: ${23:\"must be less than or equal to %{count}\"}",
			"        other_than: ${24:\"must be other than %{count}\"}",
			"        odd: ${25:\"must be odd\"}",
			"        even: ${26:\"must be even\"}"
		],
		"description": "Translations errors"
	},
	"Yaml Form Configurations User with cuutomizations": {
		"prefix": "---:form_configurations:user:customizations",
		"body": [
			"---",
			"name: ${1:snake_case}",
			"resource: User",
			"api_call_notifications: $3",
			"async_callback_actions: $4",
			"authorization_policies: $5",
			"callback_actions: $6",
			"configuration: $7",
			"  profiles:",
			"     ${8:user_profile_types name}:",
			"      customizations:",
			"        ${9:Custom_model_types name}:",
			"          property_options:",
			"            readonly: ${2|true,false,DELETE - false|}",
			"            virtual: ${2|true,false,DELETE - false|}",
			"            prepopulate: ${10:integer}",
			"          properties:",
			"            ${11:text/string}:",
			"default_payload: $12",
			"email_notifications: $13",
			"flash_alert: ${14:text/string}",
			"flash_notice: ${15:text/string}",
			"redirect_to: ${16:email}",
			"resource_owner: ${17|self,anyone|}",
			"sms_notifications: $18",
			"spam_protection: $19",
			"---"
		],
		"description": "Full list of form_configurations attributes"
	},



	"Liquid: Comment": {
		"prefix": "{%:comment",
		"body": "{%- comment -%} $0 {%- endcomment -%}",
		"description": "Comment"
	},
	"Liquid: Raw": {
		"prefix": "{%:raw",
		"body": "{%- raw -%}$1{%- endraw -%}",
		"description": "Raw"
	},


	"Liquid Tags: Var Assign": {
		"prefix": "{%:assign",
		"body": "{%- assign ${1:my_varibale} = $2 -%}",
		"description": "Assign variable"
	},
	"Liquid Tags: Var Capture": {
		"prefix": "{%:capture",
		"body": "{%- capture ${1:my_varibale} -%}$2{%- endcapture -%}",
		"description": "Capture variable"
	},
	"Liquid Tags: Var Increment": {
		"prefix": "{%:increment",
		"body": "{%- increment $1 -%}",
		"description": "increment variable"
	},
	"Liquid Tags: Var Decrement": {
		"prefix": "{%:decrement",
		"body": "{%- decrement $1 -%}",
		"description": "decrement variable"
	},

	"Liquid Tags: Flow Control If": {
		"prefix": "{%:if",
		"body": [
			"{%- if $1 ${2|==,!=,<,>,<=,>=,contains|} $3 -%}",
			"\t$4",
			"{%- endif -%}"
		],
		"description": "If Logic"
	},
	"Liquid Tags: Flow Control Else": {
		"prefix": "{%:else",
		"body": "{%- else -%}",
		"description": "Else only"
	},
	"Liquid Tags: Flow Control Else If": {
		"prefix": "{%:elsif",
		"body": "{%- elsif $1 ${2|==,!=,<,>,<=,>=,contains|} $3 -%}",
		"description": "ElseIf only"
	},
	"Liquid Tags: Flow Control If Else": {
		"prefix": "{%:if:else",
		"body": [
			"{%- if $1 ${2|==,!=,<,>,<=,>=,contains|} $3 -%}",
			"\t$4",
			"{%- else -%}",
			"\t$5",
			"{%- endif -%}"
		],
		"description": "If | Else logic"
	},
	"Liquid Tags: Flow Control Case": {
		"prefix": "{%:case",
		"body": [
			"{%- case ${1:handle} -%}",
			"\t{% when $2 %}",
			"\t\t$3",
			"{%- endcase -%}"
		],
		"description": "Case/when logic"
	},
	"Liquid Tags: Flow Control When": {
		"prefix": "{%:when",
		"body": [
			"{% when $1 %}",
			"\t$2"
		],
		"description": "Case/when logic"
	},
	"Liquid Tags: Flow Control Unless": {
		"prefix": "{%:unless",
		"body": [
			"{%- unless $1 ${2|==,!=,<,>,<=,>=,contains|} $3 -%}",
			"\t$3",
			"{%- endunless -%}"
		],
		"description": "Unless logic"
	},

	"Liquid Tags: Loops For": {
		"prefix": "{%:for",
		"body": [
			"{%- for $1 in $2 -%}",
			"\t$3",
			"{%- endfor -%}"
		],
		"description": "For Loop iteration"
	},
	"Liquid Tags: Loops Cycle": {
		"prefix": "{%:cycle",
		"body": "{%- cycle${1| , group|} ${2:Item 1}, ${0:Item 2} -%}",
		"description": "Cycle iteration"
	},
	"Liquid Tags: Loops Break": {
		"prefix": "{%:break",
		"body": "{%- break -%}",
		"description": "for loop break iteration"
	},
	"Liquid Tags: Loops Continue": {
		"prefix": "{%:continue",
		"body": "{%- continue -%}",
		"description": "for loop continue iteration"
	},
	"Liquid Tags: Loops Limit": {
		"prefix": "{%:limit",
		"body": "limit:$1",
		"description": "for loop limit iteration"
	},
	"Liquid Tags: Loops Offset": {
		"prefix": "{%:offset",
		"body": "offset:$1",
		"description": "for loop offset iteration"
	},
	"Liquid Tags: Loops Range": {
		"prefix": "{%:range",
		"body": "($1..$2)",
		"description": "for loop range iteration"
	},
	"Liquid Tags: Loops Reversed": {
		"prefix": "{%:reversed",
		"body": " reversed",
		"description": "for loop reversed iteration"
	},
	"Liquid Tags: Loops ifchanged": {
		"prefix": "{%:ifchanged",
		"body": "{%- ifchanged -%} $0 {%- endifchanged -%}",
		"description": "The ifchanged tag is typically called inside a {% for %} loop because it executes a block of code but only outputs the result if this is the first time it was called or if the previous call had a different result."
	},
	"Liquid Tags: Loops TableRow": {
		"prefix": "{%:tablerow",
		"body": [
			"<table>",
			"\t{%- tablerow $1 in $2 cols:$3 limit:$4 offset:$5 -%}",
			"\t\t$0",
			"\t{%- endtablerow -%}",
			"</table>"
		],
		"description": "tablerow iteration"
	},
	"Liquid Tags: Loops Columns": {
		"prefix": "{%:cols",
		"body": "cols:$0",
		"description": "tablerow column only"
	},

	"Liquid Tags: liquid": {
		"prefix": "{%:liquid",
		"body": [
			"{%- liquid",
			"\t",
			"\t$1",
			"\t",
			"-%}",
		],
		"description": "Render"
	},
	"Liquid Tags: Render": {
		"prefix": "{%:render",
		"body": "{%- render '$1' -%}",
		"description": "Render"
	},
	"Liquid Tags: Include": {
		"prefix": "{%:include",
		"body": "{%- include $1 -%}",
		"description": "Include"
	},
	"Liquid Tags: Include With": {
		"prefix": "{%:includewith",
		"body": "{%- include $1 with $2 -%}",
		"description": "Include a template with a local variable named the same as partial file name"
	},
	"Liquid Tags: Include For": {
		"prefix": "{%:includefor",
		"body": "{%- include $1 for $2 -%}",
		"description": "Render partial for every item in the collection"
	},
	"Liquid Tags: Include Form": {
		"prefix": "{%:include_form",
		"body": "{%- include_form '${1:form_config Name}', resource_id: ${2:Resource id eg user.id}, parent_resource_id: '${3:Resource type eg custom_model_type}' -%}",
		"description": "Include_form This tag should be used to render forms defined in app/forms."
	},


	"Liquid Filter abs": {
		"prefix": "|:math:abs",
		"body": "| abs",
		"description": "abs Returns the absolute value of a number"
	},
	"Liquid Filter append": {
		"prefix": "|:append",
		"body": "| append: ${0:String or Variable}",
		"description": "append Concatenates two strings and returns the concatenated value"
	},
	"Liquid Filter at_least": {
		"prefix": "|:at_least",
		"body": "| at_least",
		"description": "at_least Limits a number to a minimum value"
	},
	"Liquid Filter at_most": {
		"prefix": "|:at_most",
		"body": "| at_most",
		"description": "at_most Limits a number to a maximum value."
	},
	"Liquid Filter capitalize": {
		"prefix": "|:capitalize",
		"body": "| capitalize",
		"description": "capitilize Makes the first character of a string capitalized"
	},
	"Liquid Filter ceil": {
		"prefix": "|:ceil",
		"body": "| ceil",
		"description": "ceil Rounds the input up to the nearest whole number. Liquid tries to convert the input to a number before the filter is applied"
	},
	"Liquid Filter concat": {
		"prefix": "|:concat",
		"body": "| concat: $1",
		"description": "concat Concatenates (joins together) multiple arrays. The resulting array contains all the items from the input arrays"
	},
	"Liquid Filter date": {
		"prefix": "|:date",
		"body": "| date: '${1:eg. %a, %b %d, %y}'",
		"description": "date Converts a timestamp into another date format"
	},
	"Liquid Filter date Now": {
		"prefix": "|:date:now",
		"body": "'now' | date: '${1:eg. %a, %b %d, %y}'",
		"description": "date now Converts a timestamp into another date format"
	},
	"Liquid Filter date input": {
		"prefix": "%:date:inputFormat",
		"body": "2010-10-31 00:00:00 -0500",
		"description": "date input format"
	},
	"Liquid Filter date Century": {
		"prefix": "%:date:Century",
		"body": "%C",
		"description": "date Century eg. 20 in 2019"
	},
	"Liquid Filter date Year without Century": {
		"prefix": "%:date:Year:withoutCentury",
		"body": "%y",
		"description": "date Year without century 19"
	},
	"Liquid Filter date Year with Century": {
		"prefix": "%:date:Year:withCentury",
		"body": "%Y",
		"description": "date Year with century 2019"
	},
	"Liquid Filter date Month 01..12": {
		"prefix": "%:date:Month:01",
		"body": "%m",
		"description": "date month 01..12"
	},
	"Liquid Filter date Month Jan": {
		"prefix": "%:date:Month:Jan",
		"body": "%b",
		"description": "date month Jan"
	},
	"Liquid Filter date Month January": {
		"prefix": "%:date:Month:January",
		"body": "%B",
		"description": "date month January"
	},
	"Liquid Filter date Week 01..53": {
		"prefix": "%:date:Week:01-53",
		"body": "%V",
		"description": "date week"
	},
	"Liquid Filter date Week 01..53 Monday": {
		"prefix": "%:date:Week:00-53:Monday",
		"body": "%W",
		"description": "date week Assuming Monday First 00..53"
	},
	"Liquid Filter date Week 01..53 Sunday": {
		"prefix": "%:date:Week:00-53:Sunday",
		"body": "%U",
		"description": "date week Assuming Sunday First 00..53"
	},
	"Liquid Filter date Day Mon": {
		"prefix": "%:date:Day:Mon",
		"body": "%a",
		"description": "date Day Mon"
	},
	"Liquid Filter date Day Monday": {
		"prefix": "%:date:Day:Monday",
		"body": "%A",
		"description": "date Day Monday"
	},
	"Liquid Filter date Day 01..31": {
		"prefix": "%:date:Day:01-31",
		"body": "%d",
		"description": "date Day 01..31"
	},
	"Liquid Filter date Day 1..31": {
		"prefix": "%:date:Day:1-31",
		"body": "%e",
		"description": "date Day 1..31"
	},
	"Liquid Filter date Day 1..6": {
		"prefix": "%:date:Day:1-6",
		"body": "%w",
		"description": "date Day 1..6"
	},
	"Liquid Filter date Day 001..366": {
		"prefix": "%:date:Day:001-366",
		"body": "%j",
		"description": "date Day 001..366"
	},
	"Liquid Filter date Day 1..7": {
		"prefix": "%:date:Day:1-7",
		"body": "%u",
		"description": "date Day 1..7"
	},
	"Liquid Filter date Full date %m/%d/%y": {
		"prefix": "%:date:Date:Full",
		"body": "%D",
		"description": "date Full Date %m/%d/%y"
	},
	"Liquid Filter date VMS %e-%b-%Y": {
		"prefix": "%:date:Date:VMS",
		"body": "%v",
		"description": "date VMS %e-%b-%Y"
	},
	"Liquid Filter date ISO 8601 %Y-%m-%d": {
		"prefix": "%:date:Date:ISO",
		"body": "%F",
		"description": "date VMS %Y-%m-%d"
	},
	"Liquid Filter date hour 00..23": {
		"prefix": "%:date:Hour:00-23",
		"body": "%H",
		"description": "date Hour 00..23"
	},
	"Liquid Filter date hour 01..12": {
		"prefix": "%:date:Hour:01-12",
		"body": "%I",
		"description": "date Hour 01..12"
	},
	"Liquid Filter date hour 0..23": {
		"prefix": "%:date:Hour:0-23",
		"body": "%k",
		"description": "date Hour 0..23"
	},
	"Liquid Filter date hour 0..12": {
		"prefix": "%:date:Hour:0-12",
		"body": "%l",
		"description": "date Hour 0..12"
	},
	"Liquid Filter date minute 00..59": {
		"prefix": "%:date:minute:00-59",
		"body": "%M",
		"description": "date Minute 00..59"
	},
	"Liquid Filter date Second 00..60": {
		"prefix": "%:date:Second:00-60",
		"body": "%S",
		"description": "date Second 00..60"
	},
	"Liquid Filter date Seconds since 1970": {
		"prefix": "%:date:Seconds:1970",
		"body": "%s",
		"description": "date Seconds since 1970"
	},
	"Liquid Filter date Millisecond 000..999": {
		"prefix": "%:date:Millisecond:000-999",
		"body": "%L",
		"description": "date Millisecond 000..999"
	},
	"Liquid Filter date Millisecond 3 digit": {
		"prefix": "%:date:Millisecond:3",
		"body": "%3",
		"description": "date Millisecond 3 digit"
	},
	"Liquid Filter date Millisecond 6 digit": {
		"prefix": "%:date:Millisecond:6",
		"body": "%6",
		"description": "date Millisecond 6 digit"
	},
	"Liquid Filter date Nanosecond 9 digit": {
		"prefix": "%:date:Nanosecond:9",
		"body": "%9",
		"description": "date Nanosecond 9 digit"
	},
	"Liquid Filter date AM/PM": {
		"prefix": "%:date:AM/PM:U",
		"body": "%p",
		"description": "date AM/PM Uppercase"
	},
	"Liquid Filter date am/pm": {
		"prefix": "%:date:am/pm:l",
		"body": "%P",
		"description": "date am/pm lowercase"
	},
	"Liquid Filter date 12-hour %I:%M:%S %p": {
		"prefix": "%:date:12-hour",
		"body": "%r",
		"description": "date 12-hour %I:%M:%S %p"
	},
	"Liquid Filter date 24-hour %H:%M": {
		"prefix": "%:date:24-hour:HM",
		"body": "%R",
		"description": "date 24-hour %H:%M"
	},
	"Liquid Filter date 24-hour %H:%M:%S": {
		"prefix": "%:date:24-hour:HMS",
		"body": "%T",
		"description": "date 24-hour %H:%M:%S"
	},
	"Liquid Filter date Time zone - hour offset (e.g. +0900)": {
		"prefix": "%:date:Time-zone:hour",
		"body": "%z",
		"description": "date Time zone - hour offset (e.g. +0900)"
	},
	"Liquid Filter date Time zone - name": {
		"prefix": "%:date:Time-zone:name",
		"body": "%Z",
		"description": "date Time zone - name"
	},
	"Liquid Filter default": {
		"prefix": "|:default",
		"body": "| default: $0",
		"description": "default Allows you to specify a fallback in case a value doesn’t exist. default will show its value if the left side is nil, false, or empty."
	},
	"Liquid Filter divided_by": {
		"prefix": "|:divided_by",
		"body": "| divided_by: ${0:Number}",
		"description": "divided_by Divides a number by the specified number."
	},
	"Liquid Filter downcase": {
		"prefix": "|:downcase",
		"body": "| downcase",
		"description": "downcase makes each character in a string lowercase. It has no effect on strings which are already all lowercase."
	},
	"Liquid Filter escape": {
		"prefix": "|:escape",
		"body": "| escape",
		"description": "escape, escapes a string by replacing characters with escape sequences (so that the string can be used in a URL, for example). It doesn’t change strings that don’t have anything to escape."
	},
	"Liquid Filter escape_once": {
		"prefix": "|:escape_once",
		"body": "| escape_once",
		"description": "escape_once, escapes a string without changing existing escaped entities. It doesn’t change strings that don’t have anything to escape."
	},
	"Liquid Filter first": {
		"prefix": "|:first",
		"body": ".first",
		"description": "first, returns the first item of an array."
	},
	"Liquid Filter floor": {
		"prefix": "|:floor",
		"body": "| floor",
		"description": "floor, rounds a number down to the nearest whole number. Liquid tries to convert the input to a number before the filter is applied."
	},
	"Liquid Filter join": {
		"prefix": "|:join",
		"body": "| join: \"${0:String}\"",
		"description": "join, combines the items in an array into a single string using the argument as a separator."
	},
	"Liquid Filter last": {
		"prefix": "|:last",
		"body": ".last",
		"description": "last, returns the last item of an array."
	},
	"Liquid Filter lstrip": {
		"prefix": "|:lstrip",
		"body": "| lstrip",
		"description": "lstrip, Removes all whitespaces (tabs, spaces, and newlines) from the beginning of a string. The filter does not affect spaces between words."
	},
	"Liquid Filter map": {
		"prefix": "|:map",
		"body": "| map: ${0:method (String)}",
		"description": "map - returns (Array<Object>) - array of objects obtained from the original array of objects (passed in as the object parameter) by calling the method 'method' on each object in the original array"
	},
	"Liquid Filter minus": {
		"prefix": "|:minus",
		"body": "| minus: ${0:Number}",
		"description": "minus, subtracts a number from another number."
	},
	"Liquid Filter modulo": {
		"prefix": "|:modulo",
		"body": "| modulo: ${0:Number}",
		"description": "modulo, returns the remainder of a division operation."
	},
	"Liquid Filter newline_to_br": {
		"prefix": "|:newline_to_br",
		"body": "| newline_to_br",
		"description": "newline_to_br, replaces every newline (\n) with an HTML line break (<br>)."
	},
	"Liquid Filter plus": {
		"prefix": "|:plus",
		"body": "| plus: ${0:Number}",
		"description": "plus, adds a number to another number."
	},
	"Liquid Filter prepend": {
		"prefix": "|:prepend",
		"body": "| prepend: ${0:String or Variable}",
		"description": "prepend, adds the specified string to the beginning of another string."
	},
	"Liquid Filter remove": {
		"prefix": "|:remove",
		"body": "| remove: \"${0:String}\"",
		"description": "remove, removes every occurrence of the specified substring from a string."
	},
	"Liquid Filter remove_first": {
		"prefix": "|:remove_first",
		"body": "| remove_first: \"${0:String}\"",
		"description": "remove, removes only the first occurrence of the specified substring from a string."
	},
	"Liquid Filter replace": {
		"prefix": "|:replace",
		"body": "| replace: \"{1:String}\", \"{2:String}\"",
		"description": "remove, replaces every occurrence of an argument in a string with the second argument."
	},
	"Liquid Filter replace_first": {
		"prefix": "|:replace_first",
		"body": "| replace_first: \"${1:String}\", \"${2:String}\"",
		"description": "remove, replaces only the first occurrence of an argument in a string with the second argument."
	},
	"Liquid Filter reverse": {
		"prefix": "|:reverse",
		"body": "| reverse",
		"description": "reverse, reverses the order of the items in an array. reverse cannot reverse a string. Reverse cannot be used directly on a string."
	},
	"Liquid Filter round": {
		"prefix": "|:round",
		"body": "| round",
		"description": "round, rounds an input number to the nearest integer or, if a number is specified as an argument, to that number of decimal places."
	},
	"Liquid Filter rstrip": {
		"prefix": "|:rstrip",
		"body": "| rstrip",
		"description": "rstrip, removes all whitespaces (tabs, spaces, and newlines) from the right side of a string."
	},
	"Liquid Filter size": {
		"prefix": "|:size",
		"body": "| size",
		"description": "size, returns the number of characters in a string or the number of items in an array. size can also be used with dot notation (for example, {{ my_string.size }}). This allows you to use size inside tags such as conditionals."
	},
	"Liquid Filter slice": {
		"prefix": "|:slice",
		"body": "| slice: ${1:+-Number}, ${0:Number}",
		"description": "slice, returns a substring of 1 character beginning at the index specified by the argument passed in. An optional second argument specifies the length of the substring to be returned. String indices are numbered starting from 0. If the first parameter is a negative number, the indices are counted from the end of the string"
	},
	"Liquid Filter sort": {
		"prefix": "|:sort",
		"body": "| sort",
		"description": "sort, sorts items in an array by a property of an item in the array. The order of the sorted array is case-sensitive."
	},
	"Liquid Filter sort_natural": {
		"prefix": "|:sort_natural",
		"body": "| sort_natural",
		"description": "sort, sorts items in an array by a property of an item in the array."
	},
	"Liquid Filter split": {
		"prefix": "|:split",
		"body": "| split:  \"${0:String}\"",
		"description": "split, divides an input string into an array using the argument as a separator. split is commonly used to convert comma-separated items from a string to an array."
	},
	"Liquid Filter strip": {
		"prefix": "|:strip",
		"body": "| strip",
		"description": "strip, removes all whitespace (tabs, spaces, and newlines) from both the left and right side of a string. It does not affect spaces between words."
	},
	"Liquid Filter strip_html": {
		"prefix": "|:strip_html",
		"body": "| strip_html",
		"description": "strip, removes any HTML tags from a string."
	},
	"Liquid Filter strip_newlines": {
		"prefix": "|:strip_newlines",
		"body": "| strip_newlines",
		"description": "strip_newlines, removes any newline characters (line breaks) from a string."
	},
	"Liquid Filter times": {
		"prefix": "|:times",
		"body": "| times: ${0:Number}",
		"description": "times, multiplies a number by another number."
	},
	"Liquid Filter truncate": {
		"prefix": "|:truncate",
		"body": "| truncate: ${1:Number}, \"$(0:Custom/No Ellipsis)\"",
		"description": "truncate, truncate shortens a string down to the number of characters passed as a parameter. Default ellipsis..."
	},
	"Liquid Filter truncatewords": {
		"prefix": "|:truncatewords",
		"body": "| truncatewords: ${1:Number}, \"$(0:Custom/No Ellipsis)\"",
		"description": "truncatewords, shortens a string down to the number of words passed as the argument. Default ellipsis..."
	},
	"Liquid Filter uniq": {
		"prefix": "|:uniq",
		"body": "| uniq",
		"description": "uniq, removes any duplicate elements in an array."
	},
	"Liquid Filter upcase": {
		"prefix": "|:upcase",
		"body": "| upcase",
		"description": "upcase, makes each character in a string uppercase. It has no effect on strings which are already all uppercase."
	},
	"Liquid Filter url_decode": {
		"prefix": "|:url_decode",
		"body": "| url_decode",
		"description": "url_decode, decodes a string that has been encoded as a URL or by url_encode."
	},
	"Liquid Filter url_encode": {
		"prefix": "|:url_encode",
		"body": "| url_encode",
		"description": "url_encode, converts any URL-unsafe characters in a string into percent-encoded characters."
	},

	// START PLATFORMOS FILTERS
	"Liquid Filter assign_to_hash_key": {
		"prefix": "|:assign_to_hash_key",
		"body": "| assign_to_hash_key: ${0:String eg('name', 'Dunder Mifflin'), Hash or Object}",
		"description": "assign_to_hash_key returns (Hash) params hash (Hash), key (String), value (Object). Allowing you to add new key-value pairs into existing hash."
	},
	"Liquid Filter add_hash_key": {
		"prefix": "|:add_hash_key",
		"body": "| add_hash_key: '${1:key}' ${2:value object} ",
		"description": "add_hash_key, returns hash"
	},
	"Liquid Filter add_to_array": {
		"prefix": "|:add_to_array",
		"body": "| add_to_array: ${0:object} ",
		"description": "add_to_array, returns array to which we add the item given as the second parameter"
	},
	"Liquid Filter add_to_date": {
		"prefix": "|:add_to_date",
		"body": "| add_to_date: ${0:number_of_days integer} ",
		"description": "add_to_date, returns input date/time to which the number_of_days days have been added; use negative values to obtain a date in the past."
	},
	"Liquid Filter add_to_time": {
		"prefix": "|:add_to_time",
		"body": "| add_to_time: ${1:number integer}, '${2|y,mo,w,d,h,m,s|}' ",
		"description": "add_to_time, returns time to which the time number have been added; use negative values to obtain a time in the past."
	},
	"Liquid Filter advanced_format": {
		"prefix": "|:advanced_format",
		"body": "| advanced_format: ${0:%[flags][width][.precision]type}",
		"description": "add_to_date, returns (string) formatted string. %[flags][width][.precision]type. More examples and information could be taken from: https://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sprintf."
	},
	"Liquid Filter any": {
		"prefix": "|:any",
		"body": "| any: ${0:String/Number}",
		"description": "add_to_date, returns (Boolean) - checks if given array contains at least one queried string/number."
	},
	"Liquid Filter asset_url": {
		"prefix": "|:asset_url",
		"body": "| asset_url",
		"description": "asset_url - returns (String) - url to the physical file if existing, root asset url otherwise"
	},
	"Liquid Filter base64_decode": {
		"prefix": "|:base64_decode",
		"body": "| base64_decode",
		"description": "base64_decode decode base64 encoded string"
	},
	"Liquid Filter base64_encode": {
		"prefix": "|:base64_encode",
		"body": "| base64_encode",
		"description": "base64_encode creates a base64 encoded string"
	},
	"Liquid Filter cast_json_string_to_hash": {
		"prefix": "|:cast_json_string_to_hash",
		"body": "| cast_json_string_to_hash",
		"description": "Casts json string to hash"
	},
	"Liquid Filter compact": {
		"prefix": "|:compact",
		"body": "| compact",
		"description": "compact returns (Array<Object>) - array from which blank values are removed"
	},
	"Liquid Filter compute_hmac": {
		"prefix": "|:compute_hmac",
		"body": "| compute_hmac: ${0:String - data, secret ,algorithm}",
		"description": "compute_hmac - returns (String) - Keyed-hash message authentication code (HMAC), that can be used to authenticate requests from third party apps, for ex. Stripe webhooks requests"
	},
	"Liquid Filter detect": {
		"prefix": "|:detect",
		"body": "| detect: ${0:Hash eg field_name: value}",
		"description": "detect - returns (Object) - with first object from collection that matches provided conditions."
	},
	"Liquid Filter dig": {
		"prefix": "|:dig",
		"body": "| dig: ${1:Hash, Array}",
		"description": "dig - returns (Object) - digs into and retrieve data from json"
	},
	"Liquid Filter digest": {
		"prefix": "|:digest",
		"body": "| digest${1| ,: 'md5',: 'sha1',: 'sha256',: 'sha384',: 'sha512'|}",
		"description": "digest - returns (String) - hexadecimal hash value obtained by applying the selected algorithm to the message"
	},
	"Liquid Filter download_file": {
		"prefix": "|:download_file",
		"body": "| download_file ${1:max_size max:50 default:1}",
		"description": "download_file - returns (String) - Body of the remote file"
	},
	"Liquid Filter encrypt": {
		"prefix": "|:encrypt",
		"body": "| encrypt '${1:algorithm}', '${2:key}' ${3| ,\\,iv: initialization vector|}",
		"description": "encrypt - returns (String) - Base64 encoded (RFC 4648) encrypted string using the algorithm of your choice. Initialization Vector (iv) will be appended"
	},
	"Liquid Filter escape_javascript": {
		"prefix": "|:escape_javascript",
		"body": "| escape_javascript",
		"description": "escape_javascript - returns (String) - with escaped javascript."
	},
	"Liquid Filter expand_url_template": {
		"prefix": "|:expand_url_template",
		"body": "| expand_url_template: ${0:Hash eg field_name: \"value\"}",
		"description": "expand_url_template - returns (String) - url"
	},
	"Liquid Filter extract_url_params": {
		"prefix": "|:extract_url_params",
		"body": "| extract_url_params: ${0:String Array<string> eg '\/search\/{city}\/{street}'}",
		"description": "extract_url_params - returns (Hash) - params"
	},
	"Liquid Filter fetch": {
		"prefix": "|:fetch",
		"body": "| fetch: ${0:Key(String)} Deprecated",
		"description": "fetch - returns (Object) - {{ users | first | fetch: \"name\"}} => \"Jane\""
	},
	"Liquid Filter flatten": {
		"prefix": "|:flatten",
		"body": "| flatten: ${0:(Array<Array>)}",
		"description": "flatten - returns (Array<Object>) - with objects"
	},
	"Liquid Filter format_number": {
		"prefix": "|:format_number",
		"body": "| format_number: precision: ${1:precision(integer)}, significant: ${2:significant()}, separator: '${3:separator}', delimiter: '${4:delimiter}', ${5|'strip_insignificant_zeros',''}",
		"description": "format_number - returns (string)"
	},
	"Liquid Filter group_by": {
		"prefix": "|:group_by",
		"body": "| group_by: ${0:method_name (String)}",
		"description": "group_by - returns (Hash<MethodResult => Array<Object>>) - the original array grouped by method specified by the second parameter"
	},
	"Liquid Filter hcaptcha": {
		"prefix": "|:hcaptcha",
		"body": "| hcaptcha",
		"description": "hcaptcha - returns (Boolean) - whether the parameters are valid hcaptcha verification parameters"
	},
	"Liquid Filter html_safe": {
		"prefix": "|:html_safe",
		"body": "| html_safe: ${0:text (String)}",
		"description": "html_safe - returns (String) - returns string that can be rendered with all html tags by default all variables are striped from danger html tags"
	},
	"Liquid Filter humanize": {
		"prefix": "|:humanize",
		"body": "| humanize",
		"description": "humanize - returns (String) - a human readable string derived from the input; capitalizes the first word, turns underscores into spaces, and strips a trailing '_id' if present. Meant for creating pretty output."
	},
	"Liquid Filter in_groups_of": {
		"prefix": "|:in_groups_of",
		"body": "| in_groups_of: ${0:integer}",
		"description": "in_groups_of - returns (Array<Array<Object>>) - the original array split into groups having the size specified by the second parameter (an array of arrays)"
	},
	"Liquid Filter intersection": {
		"prefix": "|:intersection",
		"body": "| intersection: ${0:other_array (Array<Object>)}",
		"description": "intersection - returns (Array<Object>) - that exists in both arrays"
	},
	"Liquid Filter is_date_before": {
		"prefix": "|:is_date_before",
		"body": "| is_date_before: ${0:second_date (DateTime)}",
		"description": "is_date_before - returns (Boolean) - returns true if first date is lower than second date."
	},
	"Liquid Filter is_date_in_past": {
		"prefix": "|:is_date_in_past",
		"body": "| is_date_in_past",
		"description": "is_date_in_past - returns (Boolean) - true if date passed is in the past, false otherwise."
	},
	"Liquid Filter is_included_in_array": {
		"prefix": "|:is_included_in_array",
		"body": "| is_included_in_array: ${0:el (object)} Deprecated",
		"description": "is_included_in_array - returns (Boolean) - whether the array includes the element given."
	},
	"Liquid Filter is_json_valid": {
		"prefix": "|:is_json_valid",
		"body": "| is_json_valid: ${0:String}",
		"description": "is_token_valid - returns (Boolean) - returns true if the token has not expired and was generated for given user."
	},
	"Liquid Filter is_token_valid": {
		"prefix": "|:is_token_valid",
		"body": "| is_token_valid: ${0:user_id (Integer)}",
		"description": "is_token_valid - returns (Boolean) - returns true if the token has not expired and was generated for given user."
	},
	"Liquid Filter json": {
		"prefix": "|:json",
		"body": "| json",
		"description": "json - returns object (Object) - object we want a JSON representation of"
	},
	"Liquid Filter jwt_encode": {
		"prefix": "|:json:web-token:jwt:encode",
		"body": "| jwt_encode: ${1|'none','HS256','HS384','HS512','RS256','RS384','RS512'|}, '${2:shared secret (for hmac) or private key for RSA (defaults to: nil)}'",
		"description": "json web token - returns object (Hash) - result of decoded jwt token"
	},
	"Liquid Filter jwt_decode": {
		"prefix": "|:json:web-token:jwt:decode",
		"body": "| jwt_decode: ${1|'none','HS256','HS384','HS512','RS256','RS384','RS512'|}, '${2:shared secret (for hmac) or private key for RSA (defaults to: nil)}'",
		"description": "json web token - returns object (String) - jwt token encrypted using algorithm of your choice"
	},
	"Liquid Filter limit": {
		"prefix": "|:limit",
		"body": "| limit: ${0:user_id (Integer)",
		"description": "limit - returns (Array<Object>) - parameter; [1,2,3,4] limited to 2 elements gives [1,2]"
	},
	"Liquid Filter localize": {
		"prefix": "|:localize",
		"body": "| localize: ${0:format (String)",
		"description": "localize - returns (String, nil) - formatted representation of the passed in DateTime object"
	},
	"Liquid Filter map_attributes": {
		"prefix": "|:map_attributes",
		"body": "| map_attributes: ${0:attributes (Array<String>)}",
		"description": "map_attributes - returns (Array<Array>) - array of arrays with values for given keys"
	},
	"Liquid Filter markdown": {
		"prefix": "|:markdown",
		"body": "| markdown",
		"description": "markdown - returns (String) - processed text with markdown syntax changed to HTML"
	},
	"Liquid Filter matches": {
		"prefix": "|:matches",
		"body": "| matches: ${0:regexp (String)}",
		"description": "matches - returns (Boolean) - whether the given string matches the given regular expression"
	},
	"Liquid Filter new_line_to_br": {
		"prefix": "|:new_line_to_br",
		"body": "| new_line_to_br",
		"description": "new_line_to_br - returns (String) - replaces newlines in the input string with the HTML tag"
	},
	"Liquid Filter pad_left": {
		"prefix": "|:pad_left",
		"body": "| pad_left: ${0:count (Integer) | symbol(String)}",
		"description": "pad_left - returns (String) - returns string padded from left to length of count with symbol character"
	},
	"Liquid Filter parameterize": {
		"prefix": "|:parameterize",
		"body": "| parameterize: ${0:separator (String) default '-'}",
		"description": "parameterize - returns (String) - replaces special characters in a string so that it may be used as part of a 'pretty' URL; the default separator used is '-';"
	},
	"Liquid Filter parse_json": {
		"prefix": "|:parse_json",
		"body": "| parse_json",
		"description": "parse_json - returns (String) - converts json into hash"
	},
	"Liquid Filter pluralize": {
		"prefix": "|:pluralize",
		"body": "| pluralize: ${0:count (Number) default '2'}",
		"description": "pluralize - returns (String) - pluralized version of the input string"
	},
	"Liquid Filter pricify": {
		"prefix": "|:pricify",
		"body": "| pricify: ${0:currency (String) default 'USD'}",
		"description": "pricify - returns (String) - formatted price using the global price formatting rules"
	},
	"Liquid Filter pricify_cents": {
		"prefix": "|:pricify_cents",
		"body": "| pricify_cents: ${0:currency (String) default 'USD'}",
		"description": "pricify_cents - returns (String) - formatted price using the global price formatting rule"
	},
	"Liquid Filter querify": {
		"prefix": "|:querify",
		"body": "| querify",
		"description": "querify - returns (String) - a query string"
	},
	"Liquid Filter random_string": {
		"prefix": "|:random_string",
		"body": "| random_string",
		"description": "random_string - returns (String) - returns a random alphanumeric string of given length;"
	},
	"Liquid Filter raw_escape_string": {
		"prefix": "|:raw_escape_string",
		"body": "| raw_escape_string",
		"description": "raw_escape_string - returns (String) - input string HTML-escaped; this will return a string whose HTML tags will be visible in the browser"
	},
	"Liquid Filter regex_matches": {
		"prefix": "|:regex_matches",
		"body": "| regex_matches: ${0:regexp (String)}",
		"description": "regex_matches - returns (Array<Array<String>>) - matches for the expression in the string; each item in the array is an array containing all groups matches; for example for the regex (.)(.) and the text 'abcdef', the result will look like: [[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]]"
	},
	"Liquid Filter reject": {
		"prefix": "|:reject",
		"body": "| reject: ${0:conditions (Hash) eg field_name: value}",
		"description": "reject - returns (Array<Object>) - with objects from collection that don't match provided conditions"
	},
	"Liquid Filter remove_hash_key": {
		"prefix": "|:remove_hash_key",
		"body": "| remove_hash_key: '${0:Key(String)}'",
		"description": "remove_hash_key - returns (Object)"
	},
	"Liquid Filter replace_regex": {
		"prefix": "|:replace_regex",
		"body": "| replace_regex: ${1:regexp (string)}, ${2:replacement (string)}, ${3:options (string) (e.g. 'ix', 'm', 'mi' etc.) - default: ''}, ${4:regexp (boolean)}",
		"description": "rotate - returns (Array<Object>) - with objects from collection that don't match provided conditions"
	},
	"Liquid Filter rotate": {
		"prefix": "|:rotate",
		"body": "| rotate: ${0:count (Integer) default 1}",
		"description": "rotate - returns (Array<Object>) - with objects from collection that don't match provided conditions"
	},
	"Liquid Filter sanitize": {
		"prefix": "|:sanitize",
		"body": "| sanitize${1| ,: whitelist_attributes,: whitelist_tags|}",
		"description": "sanitize - returns (String) params whitelist_attributes (Array<String>) - (defaults to: nil), whitelist_tags (Array<String>) - (defaults to: nil) - allowing you to sanitize user input before rendering it and at the same time decide which attributes should not be sanitized"
	},
	"Liquid Filter select": {
		"prefix": "|:select",
		"body": "| select: ${0:conditions (Hash) eg field_name: value}",
		"description": "select - returns (Array<Object>) - with objects from collection that matches provided conditions"
	},
	"Liquid Filter sha1": {
		"prefix": "|:sha1",
		"body": "| sha1",
		"description": "sha1 - returns (String) - SHA1 digest of the input object"
	},
	"Liquid Filter shuffle_array": {
		"prefix": "|:shuffle_array",
		"body": "| shuffle_array",
		"description": "shuffle_array - returns (Array<Object)"
	},
	"Liquid Filter slugify": {
		"prefix": "|:slugify",
		"body": "| slugify",
		"description": "slugify - returns (String) - replaces special characters in a string so that it may be used as part of a 'pretty' URL;"
	},
	"Liquid Filter sort_by": {
		"prefix": "|:sort_by",
		"body": "| sort_by: '${0:property}'",
		"description": "returns (Array) - Sorted object (Array of Hash)"
	},
	"Liquid Filter strftime": {
		"prefix": "|:strftime",
		"body": "| strftime: ${0:eg'%Y-%m-%d %H:%M'}",
		"description": "strftime - returns (String) - formatted representation of the date object; the formatted representation will be based on what the format parameter specifies"
	},
	"Liquid Filter subtract_array": {
		"prefix": "|:subtract_array",
		"body": "| subtract_array: ${0: other_array (Array<Object>)}",
		"description": "subtract_array - returns (Array<Object>) - that is a difference between two arrays"
	},
	"Liquid Filter sum_array": {
		"prefix": "|:sum_array",
		"body": "| sum_array",
		"description": "sum_array - returns (Numeric) - summarised value of array"
	},
	"Liquid Filter time_diff": {
		"prefix": "|:time_diff",
		"body": "| time_diff: start: ${1:(StringIntegerDateTime)}, finish ${2:(StringIntegerDateTime)}, unit: '${3:(String defaualt 'ms'}', precision: ${4:(Integer}",
		"description": "time_diff - returns (Float)"
	},
	"Liquid Filter titleize": {
		"prefix": "|:titleize",
		"body": "| titleize",
		"description": "titleize - returns (String) - capitalizes all the words and replaces some characters in the string to create a nicer looking title; it is meant for creating pretty output"
	},
	"Liquid Filter to_date": {
		"prefix": "|:to_date",
		"body": "| to_date",
		"description": "to_date - returns (Date) - a Date object obtained/parsed from the input object"
	},
	"Liquid Filter to_mobile_number": {
		"prefix": "|:to_mobile_number",
		"body": "| to_mobile_number: ${0:country (String)}",
		"description": "to_mobile_number - returns (String) - returns mobile number in E.164 format; recommended for sending sms notifications"
	},
	"Liquid Filter to_positive_integer": {
		"prefix": "|:to_positive_integer",
		"body": "| to_positive_integer: ${0:default (Integer)}",
		"description": "to_positive_integer - returns (Integer)"
	},
	"Liquid Filter to_time": {
		"prefix": "|:to_time",
		"body": "| to_time: ${0:time (String, Integer)}",
		"description": "to_time - returns (DateTime) - a time object created from parsing the string representation of time given as input"
	},
	"Liquid Filter translate": {
		"prefix": "|:translate",
		"body": "| translate: ${0:options Hash {String => String}}",
		"description": "translate - returns (String) - translation value taken from translations yml file for the key given as parameter"
	},
	"Liquid Filter url_for_path_with_token": {
		"prefix": "|:url_for_path_with_token",
		"body": "| url_for_path_with_token: current_user",
		"description": "url_for_path_with_token - returns (String) - returns a url for the given page slug, which includes user temporary token;"
	},
	"Liquid Filter useragent": {
		"prefix": "|:useragent",
		"body": "| useragent",
		"description": "useragent - (Hash) - parsed browser useragent information"
	},
	"Liquid Filter uuid": {
		"prefix": "|:uuid",
		"body": "| uuid",
		"description": "uuid - returns (String)"
	},	
	"Liquid Filter verify_access_key": {
		"prefix": "|:verify_access_key",
		"body": "| verify_access_key",
		"description": "verify_access_key - returns (Boolean) - eg {% assign access_key = '12345' %} {{ access_key | verify_access_key }} => true"
	},	
	"Liquid Filter video_params": {
		"prefix": "|:video_params",
		"body": "| video_params",
		"description": "video_params - returns (Hash) - metadata about video"
	},
	"Liquid Filter videoify": {
		"prefix": "|:videoify",
		"body": "| videoify",
		"description": "videoify - returns (String) - if the given url is supported, an HTML formatted string containing a video player (inside an iframe) which will play the video at the given url; otherwise an empty string is returned"
	},
	// END PLATFORMOS FILTER


	"Liquid Var Layout": {
		"prefix": "{{:layout",
		"body": "{{- content_for_layout -}}",
		"description": "Adds specified content to Layout"
	},
	"Liquid Var asset_url Access": {
		"prefix": "{{:asset_url",
		"body": "{{- '${1:path/file.ext}' | asset_url -}}",
		"description": "Accessing Assets - returns (String) - url to the physical file if existing, root asset url otherwise"
	},
	"Liquid Var Assets Check": {
		"prefix": "{{:asset_url:list",
		"body": "{{- asset_url -}}",
		"description": "Use {{ asset_url }} variable to check your assets. This will list the full URL of your assets on our content delivery network, including the time of the latest update (used for caching)."
	},
	"Liquid Var random_string": {
		"prefix": "{{:random_string",
		"body": "{{- ${0:length (Int) default '12' | random_string -}}",
		"description": "random_string - returns (String) - returns a random alphanumeric string of given length;"
	},

	"Liquid pOS Tags: background": {
		"prefix": "{%:background",
		"body": "{%- background '${1:options hash}' -%}",
		"description": "Invokes code within the tag asynchronously, in the background. You will only have access to variables you explicitly pass to the background tag."
	},
	"Liquid pOS Tags: cache": {
		"prefix": "{%:cache",
		"body": "{%- cache '${1:key}', expire: ${2:integer} -%}$3{% endcache %}",
		"description": "Checks if there's html cached for the given key. If yes, it just returns the value without processing anything inside the cache tag, otherwise it executes code, stores the result in the cache."
	},
	"Liquid pOS Tags: content_for": {
		"prefix": "{%:content_for",
		"body": "{%- content_for '${1:Yield}' -%}$2{%- endcontent_for -%}",
		"description": "Adds specified content to Layout"
	},
	"Liquid pOS Tags: export": {
		"prefix": "{%:export",
		"body": "{%- export ${1:variable_names}, namespace: '${2:namespace}' -%}",
		"description": "Exports and makes avaiable variables from an include with local scope outside the partial. Used in conjunction with context.exports"
	},
	"Liquid pOS Tags: form": {
		"prefix": "{%:form",
		"body": [
			"{%- form html-id: '${1:someid}', html-novalidate: true, html-class: '${2:class}', html-data-user-id: '${3:someid}', html-multipart: false -%}",
			"\t{{ form_builder }}",
			"{%- endform -%}"
		],
		"description": "used to generate a html form element for a resource. Use within form configuration. Inside the tag you can use form_builder variable."
	},
	"Liquid pOS Tags: function": {
		"prefix": "{%:function",
		"body": "{%- function ${1:my_varibale} = $2 -%}",
		"description": "Allows to store a variable returned by a partial. Partial needs to return data with `return` tag."
	},
	"Liquid pOS Tags: graphql": {
		"prefix": "{%:graphql",
		"body": "{%- graphql \"${1:query_name}\", result_name: \"${2:default g}\" -%}",
		"description": "execute GraphQL query stored in a file or invoke GraphQL query inline."
	},
	"Liquid pOS Tags: hash_assign": {
		"prefix": "{%:hash_assign",
		"body": [
			"{%- hash_assign ${1:my_variable[\"a\"][\"b\"]} -%}"
		],
		"description": "Allows to easily modify a Hash with a syntax same as assign tag."
	},
	"Liquid pOS Tags: include_form": {
		"prefix": "{%:include_form",
		"body": [
			"{%- include_form '${1:form_name}', id: ${2:resource id}, parent_resource_id: '${2:string}' -%}"
		],
		"description": "used to render forms defined in form_configurations directory."
	},
	"Liquid pOS Tags: log": {
		"prefix": "{%:log",
		"body": "{%- log ${1:any object to be printed}, type: '${2|error,info,debug|}' -%}",
		"description": "log Print any information to instance logs"
	},
	"Liquid pOS Tags: parse_json": {
		"prefix": "{%:parse_json",
		"body": [
			"{% parse_json ${1:variable} %}",
			"\t{",
			"\t\t'name': 'value'",
			"\t}",
			"{%- endparse_json -%}"
		],
		"description": "used to generate hash from json."
	},
	"Liquid pOS Tags: print": {
		"prefix": "{%:print",
		"body": "{%- print ${1:variable} -%}",
		"description": "Print variable, skipping any additional sanitization. It provides a way to display a variable which consists of both safe and unsafe html."
	},
	"Liquid pOS Tags: redirect_to": {
		"prefix": "{%:redirect_to",
		"body": "{%- redirect_to '${1:path or url}${2|' ,'\\, status: 301 |}-%}",
		"description": "Redirects browser to target."
	},
	"Liquid pOS Tags: response_status": {
		"prefix": "{%:response_status",
		"body": "{%- response_status ${1|200,204,400|} -%}",
		"description": "Allows you to set HTTP status for the response. Default 200."
	},
	"Liquid pOS Tags: return": {
		"prefix": "{%:return",
		"body": "{%- return ${1:variable} -%}",
		"description": "Used inside a partial invoked by a function tag to return a variable"
	},
	"Liquid pOS Tags: session": {
		"prefix": "{%:session",
		"body": "{%- session ${1:variable} = ${2:data} -%}",
		"description": "stores data during user's session Sets field of given name to given value in context.session"
	},
	"Liquid pOS Tags: spam_protection default": {
		"prefix": "{%:spam_protection_default",
		"body": "{%- spam_protection -%}",
		"description": "spam_protection Generates html for recaptcha_v2 spam protection"
	},
	"Liquid pOS Tags: spam_protection": {
		"prefix": "{%:spam_protection",
		"body": "{%- spam_protection \"${1:strategy}\", action: \"${2:action}\" -%}",
		"description": "spam_protection Generates html for recaptcha spam protection"
	},
	"Liquid pOS Tags: yield": {
		"prefix": "{%:yield",
		"body": "{%- yield '${0:Content_for name}' -%}",
		"description": "yield Execute code wrapped inside content_for {% content_for 'content_for_name' %}"
	},


	// START LIQUID TAG THEME

	"Liquid Theme: Echo": {
		"prefix": " echo",
		"body": "echo $1",
		"description": "Liquid Theme Tag Echo"
	},

	"Liquid Theme: Comment": {
		"prefix": " comment",
		"body": [
			"comment",
			"---------------------------------",
			"\t$0",
			"---------------------------------",
			"endcomment"
		],
		"description": "Liquid Theme Tag Comment"
	},
	
	"Liquid Theme Tags: Theme Var Assign": {
		"prefix": "assign",
		"body": "assign ${1:my_varibale} = $2",
		"description": "Liquid Theme Tag Assign variable"
	},
	"Liquid Theme Tags: Theme Var Increment": {
		"prefix": " increment",
		"body": "increment $1",
		"description": "Liquid Theme Tag increment variable"
	},
	"Liquid Theme Tags: Theme Var Decrement": {
		"prefix": " decrement",
		"body": "decrement $1",
		"description": "Liquid Theme Tag decrement variable"
	},
	
	"Liquid Theme Tags: Flow Control If": {
		"prefix": " if",
		"body": [
			"if $1 ${2|==,!=,<,>,<=,>=,contains|} $3",
			"\t$4",
			"endif"
		],
		"description": "Liquid Theme Tag If Logic"
	},
	"Liquid Theme Tags: Flow Control Else": {
		"prefix": " else",
		"body": "else",
		"description": "Liquid Theme Tag Else only"
	},
	"Liquid Theme Tags: Flow Control Else If": {
		"prefix": " elsif",
		"body": "elsif $1 ${2|==,!=,<,>,<=,>=,contains|} $3",
		"description": "Liquid Theme Tag ElseIf only"
	},
	"Liquid Theme Tags: Flow Control If Else": {
		"prefix": " if:else",
		"body": [
			"if $1 ${2|==,!=,<,>,<=,>=,contains|} $3",
			"\t$4",
			"else",
			"\t$5",
			"endif"
		],
		"description": "Liquid Theme Tag If | Else logic"
	},
	"Liquid Theme Tags: Flow Control Case": {
		"prefix": " case",
		"body": [
			"case ${1:handle}",
			"\twhen $2",
			"\t\t$3",
			"endcase"
		],
		"description": "Liquid Theme Tag Case/when logic"
	},
	"Liquid Theme Tags: Flow Control When": {
		"prefix": " when",
		"body": [
			"when $1",
			"\t$2"
		],
		"description": "Liquid Theme Tag Case/when logic"
	},
	"Liquid Theme Tags: Flow Control Unless": {
		"prefix": " unless",
		"body": [
			"unless $1 ${2|==,!=,<,>,<=,>=,contains|} $3",
			"\t$3",
			"endunless"
		],
		"description": "Liquid Theme Tag Unless logic"
	},
	
	"Liquid Theme Tags: Loops For": {
		"prefix": " for",
		"body": [
			"for $1 in $2",
			"\t$3",
			"endfor"
		],
		"description": "Liquid Theme Tag For Loop iteration"
	},
	"Liquid Theme Tags: Loops Cycle": {
		"prefix": " cycle",
		"body": "cycle${1| , group|} ${2:Item 1}, ${0:Item 2}",
		"description": "Liquid Theme Tag Cycle iteration"
	},
	"Liquid Theme Tags: Loops Break": {
		"prefix": " break",
		"body": "break",
		"description": "Liquid Theme Tag for loop break iteration"
	},
	"Liquid Theme Tags: Loops Continue": {
		"prefix": " continue",
		"body": "continue",
		"description": "Liquid Theme Tag for loop continue iteration"
	},
	"Liquid Theme Tags: Loops Limit": {
		"prefix": " limit",
		"body": "limit:$1",
		"description": "Liquid Theme Tag for loop limit iteration"
	},
	"Liquid Theme Tags: Loops Offset": {
		"prefix": " offset",
		"body": "offset:$1",
		"description": "Liquid Theme Tag for loop offset iteration"
	},
	"Liquid Theme Tags: Loops Range": {
		"prefix": " range",
		"body": "($1..$2)",
		"description": "Liquid Theme Tag for loop range iteration"
	},
	"Liquid Theme Tags: Loops Reversed": {
		"prefix": " reversed",
		"body": " reversed",
		"description": "Liquid Theme Tag for loop reversed iteration"
	},
	"Liquid Theme Tags: Loops ifchanged": {
		"prefix": " ifchanged",
		"body": [
			"ifchanged",
			"\t$0",
			"endifchanged"
		],
		"description": "The ifchanged tag is typically called inside a {% for %} loop because it executes a block of code but only outputs the result if this is the first time it was called or if the previous call had a different result."
	},
	"Liquid Theme Tags: Loops TableRow": {
		"prefix": " tablerow",
		"body": [
			"<table>",
			"\ttablerow $1 in $2 cols:$3 limit:$4 offset:$5",
			"\t\t$0",
			"\tendtablerow",
			"</table>"
		],
		"description": "Liquid Theme Tag tablerow iteration"
	},
	"Liquid Theme Tags: Loops Columns": {
		"prefix": " cols",
		"body": "cols:$0",
		"description": "Liquid Theme Tag tablerow column only"
	},
	
	"Liquid Theme Tags: Render": {
		"prefix": " render",
		"body": "render '$1'",
		"description": "Liquid Theme Tag Render"
	},
	"Liquid Theme Tags: Include": {
		"prefix": " include",
		"body": "include $1",
		"description": "Liquid Theme Tag Include"
	},
	"Liquid Theme Tags: Include With": {
		"prefix": " includewith",
		"body": "include $1 with $2",
		"description": "Liquid Theme Tag Include a template with a local variable named the same as partial file name"
	},
	"Liquid Theme Tags: Include For": {
		"prefix": " includefor",
		"body": "include $1 for $2",
		"description": "Liquid Theme Tag Render partial for every item in the collection"
	},
	"Liquid Theme Tags: Include Form": {
		"prefix": " include_form",
		"body": "include_form '${1:form_config Name}', resource_id: ${2:Resource id eg user.id}, parent_resource_id: '${3:Resource type eg custom_model_type}'",
		"description": "Liquid Theme Tag Include_form This tag should be used to render forms defined in app/forms."
	},

	"Liquid Theme pOS Tags: log": {
		"prefix": " log",
		"body": "log ${1:any object to be printed}, type: '${2|error,info,debug|}'",
		"description": "log Print any information to instance logs"
	},
	"Liquid Theme pOS Tags: print": {
		"prefix": " print",
		"body": "print ${1:variable}",
		"description": "Print variable, skipping any additional sanitization. It provides a way to display a variable which consists of both safe and unsafe html."
	},
	"Liquid Theme pOS Tags: redirect_to": {
		"prefix": " redirect_to",
		"body": "redirect_to '${1:path or url}${2|' ,'\\, status: 301 |}",
		"description": "Redirects browser to target."
	},
	"Liquid Theme pOS Tags: response_status": {
		"prefix": " response_status",
		"body": "response_status ${1|200,204,400|}",
		"description": "Allows you to set HTTP status for the response. Default 200."
	},
	"Liquid Theme pOS Tags: return": {
		"prefix": " return",
		"body": "return ${1:variable}",
		"description": "Used inside a partial invoked by a function tag to return a variable"
	},
	
	// END LIQUID TAG THEME



	"GraphQL search page content": {
		"prefix": "gql:search_page",
		"body": [
			"query search_page(",
			"\t$value: String",
			") {",
			"\tpages: pages(",
			"\t\tfilter: {",
			"\t\t\tcontent: {",
			"\t\t\t\tcontains: $value",
			"\t\t\t}",
			"\t\t}",
			"\t) {",
			"\t\ttotal_entries",
			"\t\tresults {",
			"\t\t\tslug",
			"\t\t\tcontent",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "GraphQL Search page content. Page needs to be marked as searchable: true. Search will work on rendered page version, so this page can't rely on any dynamic data."
	},
	"GraphQL mutation delete customizations items": {
		"prefix": "gql:mutation:customizations_delete_all",
		"body": [
			"mutation delete_${1:Custom_model_types Name} {",
			"\tcustomizations_delete_all(custom_model_type_name: \"${2:Custom_model_types Name}\") {",
			"\t\tid",
			"\t}",
			"}"
		],
		"description": "GraphQL delete all of custom_model_types items."
	},
	"GraphQL query people": {
		"prefix": "gql:query:people",
		"body": [
			"query get_users {",
			"\tpeople {",
			"\t\tresults {",
			"\t\t\tid",
			"\t\t\temail",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "GraphQL query all users (people)."
	},

	"context.authenticity_token": {
		"prefix": "context:authenticity_token",
		"body": "context.authenticity_token",
		"description": "Returns Environment eg staging"
	},
	"context.constants": {
		"prefix": "context:constants",
		"body": "context.constants",
		"description": "Returns constants"
	},
	"context.current_user.email": {
		"prefix": "context:current_user:email",
		"body": "context.current_user.email",
		"description": "Returns current users email"
	},
	"context.current_user.first_name": {
		"prefix": "context:current_user:first_name",
		"body": "context.current_user.first_name",
		"description": "Returns current users first name"
	},
	"context.current_user.id": {
		"prefix": "context:current_user:id",
		"body": "context.current_user.id",
		"description": "Returns current users id"
	},
	"context.current_user.last_name": {
		"prefix": "context:current_user:last_name",
		"body": "context.current_user.last_name",
		"description": "Returns current users last name"
	},
	"context.current_user.slug": {
		"prefix": "context:current_user:slug",
		"body": "context.current_user.slug",
		"description": "Returns current users slug"
	},
	"context.exports": {
		"prefix": "context:exports",
		"body": "context.exports.${1:namespace}.${2:variable_name}",
		"description": "Returns a hash of variables from inside an include"
	},
	"context.environment": {
		"prefix": "context:evironment",
		"body": "context.environment",
		"description": "Returns Environment eg staging"
	},
	"context.flash": {
		"prefix": "context:flash",
		"body": "context.flash",
		"description": "Returns flash message"
	},
	"context.headers.HTTP_HOST": {
		"prefix": "context:headers:HTTP_HOST",
		"body": "context.headers.HTTP_HOST",
		"description": "Returns headers - HTTP_HOST"
	},
	"context.headers.HTTP_USER_AGENT": {
		"prefix": "context:headers:HTTP_USER_AGENT",
		"body": "context.headers.HTTP_USER_AGENT",
		"description": "Returns headers - HTTP_USER_AGENT"
	},
	"context.headers.PATH_INFO": {
		"prefix": "context:headers:PATH_INFO",
		"body": "context.headers.PATH_INFO",
		"description": "Returns headers - PATH_INFO"
	},
	"context.headers.QUERY_STRING": {
		"prefix": "context:headers:QUERY_STRING",
		"body": "context.headers.QUERY_STRING",
		"description": "Returns headers - QUERY_STRING"
	},
	"context.headers.REQUEST_METHOD": {
		"prefix": "context:headers:REQUEST_METHOD",
		"body": "context.headers.REQUEST_METHOD",
		"description": "Returns headers - REQUEST_METHOD"
	},
	"context.headers.REQUEST_URI": {
		"prefix": "context:headers:REQUEST_URI",
		"body": "context.headers.REQUEST_URI",
		"description": "Returns headers - REQUEST_URI"
	},
	"context.headers.SERVER_NAME": {
		"prefix": "context:headers:SERVER_NAME",
		"body": "context.headers.SERVER_NAME",
		"description": "Returns headers - SERVER_NAME"
	},
	"context.headers.SERVER_PORT": {
		"prefix": "context:headers:SERVER_PORT",
		"body": "context.headers.SERVER_PORT",
		"description": "Returns headers - SERVER_PORT"
	},
	"context.location.host": {
		"prefix": "context:location:host",
		"body": "context.location.host",
		"description": "Returns location - host"
	},
	"context.location.href": {
		"prefix": "context:location:href",
		"body": "context.location.href",
		"description": "Returns location - href"
	},
	"context.location.pathname": {
		"prefix": "context:location:pathname",
		"body": "context.location.pathname",
		"description": "Returns location - pathname"
	},
	"context.location.search:slug": {
		"prefix": "context:location:search:slug",
		"body": "context.location.search.slug${1:Integer eg slug, slug2 first slug has no number}",
		"description": "Returns location search slug items inside pathname eg /folder1/folder2 => slug=folder1, slug2=folder2"
	},
	"context.location.search:queryString": {
		"prefix": "context:location:search:queryString",
		"body": "context.location.search.${1:Name of query string}",
		"description": "Returns location search name of query string"
	},
	"context.page.id": {
		"prefix": "context:page:id",
		"body": "context.page.id",
		"description": "Returns page - id"
	},
	"context.page.layout_name": {
		"prefix": "context:page:layout_name",
		"body": "context.page.layout_name",
		"description": "Returns page - layout_name"
	},
	"context.page.metadata": {
		"prefix": "context:page:metadata",
		"body": "context.page.metadata.${1:metadata name}",
		"description": "Returns page - metadata"
	},
	"context.page.slug": {
		"prefix": "context:page:slug",
		"body": "context.page.slug",
		"description": "Returns page - slug"
	},
	"context.params.action": {
		"prefix": "context:params:action",
		"body": "context.params.action",
		"description": "Returns params - action"
	},
	"context.params.controller": {
		"prefix": "context:params:controller",
		"body": "context.params.controller",
		"description": "Returns params - controller"
	},
	"context.params.language": {
		"prefix": "context:params:language",
		"body": "context.params.language",
		"description": "Returns params - language"
	},
	"context.params.slug": {
		"prefix": "context:params:slug",
		"body": "context.params.slug${1:Integer eg slug, slug2 first slug has no number}",
		"description": "Returns params - slug items inside pathname eg /folder1/folder2 => slug=folder1, slug2=folder2"
	},
	"context.session._csrf_token": {
		"prefix": "context:session:_csrf_token",
		"body": "context.session._csrf_token",
		"description": "Returns session - _csrf_token"
	},
	"context.session.instance_admin_as_user": {
		"prefix": "context:session:instance_admin_as_user",
		"body": "context.session.instance_admin_as_user",
		"description": "Returns session - instance_admin_as_user"
	},
	"context.session.instance_admin_as_user.admin_user_id": {
		"prefix": "context:session:instance_admin_as_user:admin_user_id",
		"body": "context.session.instance_admin_as_user.admin_user_id",
		"description": "Returns session - instance_admin_as_user admin_user_id"
	},
	"context.session.instance_admin_as_user.redirect_back_to": {
		"prefix": "context:session:instance_admin_as_user:redirect_back_to",
		"body": "context.session.instance_admin_as_user.redirect_back_to",
		"description": "Returns session - instance_admin_as_user redirect_back_to"
	},
	"context.session.warden.user.user.key": {
		"prefix": "context:session:warden.user.user.key",
		"body": "context.session.warden.user.user.key",
		"description": "Returns session - warden.user.user.key (array)"
	},
	"context.session.warden.user.user.session.last_request_at": {
		"prefix": "context:session:warden.user.user.session:last_request_at",
		"body": "context.session.warden.user.user.session.last_request_at",
		"description": "Returns session - warden.user.user.session last_request_at"
	},
	"context.visitor.ip": {
		"prefix": "context:visitor:IP",
		"body": "context.visitor.IP",
		"description": "Returns visitor - IP number"
	},
	"console.log Context JSON": {
		"prefix": "clog:context:json",
		"body": "<script>console.log({{ context | json }});</script>",
		"description": "Display Context JSON in Console.log"
	},

	"console.log Form Builder JSON": {
		"prefix": "clog:form_builder:json",
		"body": "<script>console.log({{ form_builder | json }});</script>",
		"description": "Display FormBuilder JSON in Console.log"
	}

}
